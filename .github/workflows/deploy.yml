name: Deploy to Server via SSH and Docker Compose

on:
  push:
    branches:
      - main  # 当推送到 main 分支时触发

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up SSH key for server access
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        env:
          SERVER_USER_ENV: ${{ secrets.SERVER_USER }}
          SERVER_HOST_ENV: ${{ secrets.SERVER_HOST }}
          SERVER_PROJECT_PATH_ENV: ${{ secrets.SERVER_PROJECT_PATH }}
          GIT_BRANCH_NAME_ENV: ${{ github.ref_name }}
        run: |
          ssh ${SERVER_USER_ENV}@${SERVER_HOST_ENV} << EOF
            echo "🚀 Connected to server: ${SERVER_HOST_ENV} as ${SERVER_USER_ENV}"
            echo "Navigating to project directory: ${SERVER_PROJECT_PATH_ENV}"
            cd "${SERVER_PROJECT_PATH_ENV}" || { echo "❌ Failed to cd into project directory"; exit 1; }

            echo "🔄 Pulling latest changes for branch '${GIT_BRANCH_NAME_ENV}' from origin..."
            
            current_branch=\$(git rev-parse --abbrev-ref HEAD)
            target_branch="main"
            
            if [ "\$current_branch" != "\$target_branch" ]; then
              echo "Switching to \$target_branch branch..."
              git checkout "\$target_branch" || { echo "❌ Failed to checkout branch \$target_branch"; exit 1; }
            fi
            
            echo "Pulling from origin \$target_branch..."
            git pull origin "\$target_branch" || { echo "❌ Failed to pull changes"; exit 1; }

            echo "🐳 Stopping and removing old Docker containers..."
            docker-compose down --remove-orphans

            echo "🏗️ Building and starting new Docker containers..."
            docker-compose up -d --build

            echo "🧹 Cleaning up unused Docker images..."
            docker image prune -af

            echo "🎉 Deployment successful!"
            echo "Frontend: http://${SERVER_HOST_ENV}:8081"
            echo "Backend: http://${SERVER_HOST_ENV}:8082"
          EOF 