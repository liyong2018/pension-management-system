name: Deploy to Server (Build & Package First)

on:
  push:
    branches:
      - main # ÂΩìÊé®ÈÄÅÂà∞ main ÂàÜÊîØÊó∂Ëß¶Âèë

jobs:
  build-and-deploy:
    name: Build, Package, and Deploy
    runs-on: ubuntu-latest # ‰ΩøÁî® GitHub Êèê‰æõÁöÑÊúÄÊñ∞Áâà Ubuntu runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Java (for backend build)
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin' # Eclipse Temurin (formerly AdoptOpenJDK)
          java-version: '17'      # ‰∏éÊÇ®ÂêéÁ´Ø Dockerfile ‰∏≠‰ΩøÁî®ÁöÑÁâàÊú¨‰∏ÄËá¥
          cache: 'maven'          # ÁºìÂ≠ò Maven ‰æùËµñ

      - name: Set up Node.js (for frontend build)
        uses: actions/setup-node@v4
        with:
          node-version: '18' # ÊàñËÄÖÊÇ®ÂâçÁ´ØÈ°πÁõÆÈúÄË¶ÅÁöÑ Node.js ÁâàÊú¨
          cache: 'npm'       # ÁºìÂ≠ò npm ‰æùËµñ (‰Ωç‰∫é frontend ÁõÆÂΩï)
          # cache-dependency-path: frontend/package-lock.json # ÊöÇÊó∂ÁßªÈô§ÔºåËÆ© action Ëá™Âä®Êü•Êâæ

      - name: Build backend project
        run: |
          echo "üöÄ Building backend project..."
          cd backend
          mvn clean package -DskipTests
          # Ê£ÄÊü• JAR Êñá‰ª∂ÊòØÂê¶ÁîüÊàê
          if [ ! -f target/*.jar ]; then
            echo "‚ùå Backend JAR file not found after build!"
            exit 1
          fi
          echo "‚úÖ Backend project built successfully."
          cd ..

      - name: Build frontend project
        run: |
          echo "üöÄ Building frontend project..."
          cd frontend
          npm config set registry https://registry.npmmirror.com # ËÆæÁΩÆÊ∑òÂÆùÈïúÂÉèÊ∫ê
          npm install
          npm run build
          # Ê£ÄÊü• dist ÁõÆÂΩïÊòØÂê¶ÁîüÊàê
          if [ ! -d dist ]; then
            echo "‚ùå Frontend dist directory not found after build!"
            exit 1
          fi
          echo "‚úÖ Frontend project built successfully."
          cd ..

      - name: Create deployment package
        run: |
          echo "üì¶ Creating deployment package: pension-project.tar.gz"
          # Á°Æ‰øù frontend/nginx.conf Â≠òÂú®ÔºåÂ¶ÇÊûúÈúÄË¶ÅÁöÑËØù
          # Â¶ÇÊûú frontend/nginx.conf ‰∏çÊòØÂøÖÈúÄÁöÑÔºåÊàñËÄÖÊÇ®ÁöÑÂâçÁ´Ø Dockerfile Ëá™Â∑±Â§ÑÁêÜ Nginx ÈÖçÁΩÆÔºåÂèØ‰ª•‰ªé‰∏ãÈù¢ÁßªÈô§
          # Â¶ÇÊûúÊ≤°Êúâ nginx.confÔºåtar ÂëΩ‰ª§‰ºöÊä•Èîô„ÄÇËøôÈáåÂÅáËÆæÂÆÉÂ≠òÂú®„ÄÇ
          # Â¶ÇÊûú deploy.sh ËÑöÊú¨‰∏≠ÁöÑ frontend/nginx.conf ÊòØÂøÖÈ°ªÁöÑÔºå‰Ω†ÈúÄË¶ÅÁ°Æ‰øùÂÆÉÂú®‰ªìÂ∫ì‰∏≠„ÄÇ
          # Â¶ÇÊûúÂÆÉ‰∏çÂ≠òÂú®ÔºåÂèØ‰ª•‰ªé‰∏ãÈù¢ÁöÑ tar ÂëΩ‰ª§‰∏≠ÁßªÈô§„ÄÇ
          # Á°Æ‰øùÂêéÁ´Ø JAR Êñá‰ª∂Â≠òÂú®
          ls -l backend/target/
          # Á°Æ‰øùÂâçÁ´Ø dist ÁõÆÂΩïÂ≠òÂú®
          ls -l frontend/
          
          tar -czvf pension-project.tar.gz \
            backend/target/*.jar \
            backend/Dockerfile \
            frontend/dist \
            frontend/Dockerfile \
            docker-compose.yml \
            # Â¶ÇÊûú frontend/nginx.conf Êñá‰ª∂Â≠òÂú®‰∫é‰ªìÂ∫ì‰∏≠Âπ∂‰∏îÊòØÂøÖÈúÄÁöÑ:
            # frontend/nginx.conf

      - name: Set up SSH key for server access
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts

      - name: Upload package to server and deploy
        env:
          SERVER_USER_ENV: ${{ secrets.SERVER_USER }}
          SERVER_HOST_ENV: ${{ secrets.SERVER_HOST }}
          SERVER_PROJECT_PATH_ENV: ${{ secrets.SERVER_PROJECT_PATH }}
        run: |
          echo "‚¨ÜÔ∏è Uploading pension-project.tar.gz to server..."
          scp pension-project.tar.gz ${SERVER_USER_ENV}@${SERVER_HOST_ENV}:${SERVER_PROJECT_PATH_ENV}/

          echo "üöÄ Deploying on server..."
          ssh ${SERVER_USER_ENV}@${SERVER_HOST_ENV} << 'EOF'
            echo "‚û°Ô∏è Navigating to project directory: ${{ secrets.SERVER_PROJECT_PATH }}"
            cd "${{ secrets.SERVER_PROJECT_PATH }}" || { echo "‚ùå Failed to cd into project directory"; exit 1; }

            echo "üì¶ Unpacking deployment package..."
            tar -xzf pension-project.tar.gz
            
            # Ê∏ÖÁêÜÊóßÁöÑÊûÑÂª∫‰∫ßÁâ©ÁõÆÂΩïÔºàÂ¶ÇÊûúÂ≠òÂú®Ôºâ‰ª•ÈÅøÂÖçÂÜ≤Á™Å
            # Docker build Êó∂‰ºö‰ΩøÁî®Êñ∞ÁöÑ Dockerfile Âíå dist/jarÔºå‰ΩÜ‰∏∫‰∫ÜÊòéÁ°ÆÔºåÂèØ‰ª•Ê∏ÖÁêÜ
            # ‰æãÂ¶ÇÔºörm -rf backend/target frontend/dist Á≠âÔºàÊ†πÊçÆÂÆûÈôÖËß£ÂéãÂêéÁöÑÁªìÊûÑÔºâ

            echo "üê≥ Stopping and removing old Docker containers..."
            # Ê≥®ÊÑèÔºöËøôÈáåÁöÑ docker-compose down Â∫îËØ•Âú®È°πÁõÆÊñá‰ª∂Â∑≤ÁªèÊõ¥Êñ∞‰πãÂêéÊâßË°å
            # Â¶ÇÊûú docker-compose.yml Êú¨Ë∫´ÊúâÂèòÂåñÔºåËÄÅÁöÑÂÆπÂô®ÂèØËÉΩÊó†Ê≥ïË¢´Ê≠£Á°ÆËØÜÂà´
            # ÈÄöÂ∏∏ docker-compose down --remove-orphans ËÉΩÂ§ÑÁêÜÂ•Ω
            docker-compose down --remove-orphans 

            echo "üèóÔ∏è Building and starting new Docker containers..."
            # --force-recreate Á°Æ‰øùÂç≥‰ΩøÈïúÂÉèÊ≤°ÊúâÂèòÂåñ‰πüÈáçÂª∫ÂÆπÂô®Ôºå‰ª•Â∫îÁî®Êñ∞ÁöÑÁéØÂ¢ÉÂèòÈáèÊàñÂç∑ÊåÇËΩΩÔºàÂ¶ÇÊûú docker-compose.yml Âèò‰∫ÜÔºâ
            # --build Á°Æ‰øùÂü∫‰∫éÊñ∞ÁöÑ Dockerfile ÂíåÊûÑÂª∫‰∫ßÁâ©ÔºàÂ¶Ç jar, distÔºâÈáçÊñ∞ÊûÑÂª∫ÈïúÂÉè
            docker-compose up --build -d --force-recreate

            echo "üßπ (Optional) Pruning unused Docker images..."
            docker image prune -af

            echo "üßº Cleaning up uploaded package..."
            rm -f pension-project.tar.gz

            echo "üéâ Deployment successful!"
            echo "Frontend should be accessible at http://${{ secrets.SERVER_HOST }}:3000" # Á°Æ‰øùÁ´ØÂè£‰∏é docker-compose.yml ‰∏ÄËá¥
            echo "Backend should be accessible at http://${{ secrets.SERVER_HOST }}:8080" # Á°Æ‰øùÁ´ØÂè£‰∏é docker-compose.yml ‰∏ÄËá¥
          EOF
