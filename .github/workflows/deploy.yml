name: Deploy to Server via SSH and Docker Compose

on:
  push:
    branches:
      - main  # 当推送到 main 分支时触发

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest # 使用 GitHub 提供的最新版 Ubuntu runner

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4 # 检出您的代码到 runner

      - name: Set up SSH key for server access
        uses: webfactory/ssh-agent@v0.9.0 # 设置 SSH agent 并加载私钥
        with:
          ssh-private-key: ${{ secrets.SERVER_SSH_PRIVATE_KEY }}

      - name: Add server to known_hosts
        run: ssh-keyscan -H ${{ secrets.SERVER_HOST }} >> ~/.ssh/known_hosts # 避免 SSH 首次连接时的交互式主机密钥验证提示

      - name: Deploy to server
        env: # 将 secrets 传递为环境变量，方便在脚本中使用
          SERVER_USER_ENV: ${{ secrets.SERVER_USER }}
          SERVER_HOST_ENV: ${{ secrets.SERVER_HOST }}
          SERVER_PROJECT_PATH_ENV: ${{ secrets.SERVER_PROJECT_PATH }}
          GIT_BRANCH_NAME_ENV: ${{ github.ref_name }} # 获取触发工作流程的分支名
        run: |
          # 通过 SSH 连接到服务器并执行部署命令
          ssh ${SERVER_USER_ENV}@${SERVER_HOST_ENV} << EOF
            echo "🚀 Connected to server: ${SERVER_HOST_ENV} as ${SERVER_USER_ENV}"
            echo " Navigating to project directory: ${SERVER_PROJECT_PATH_ENV}"
            cd "${SERVER_PROJECT_PATH_ENV}" || { echo "❌ Failed to cd into project directory. Ensure project is cloned at ${SERVER_PROJECT_PATH_ENV}."; exit 1; }

            echo "🔄 Pulling latest changes for branch '${GIT_BRANCH_NAME_ENV}' from origin..."
            
            # 确保服务器上的 git 仓库在正确的分支
            # 如果您的部署总是基于 'main' 分支，可以简化如下：
            current_branch=\$(git rev-parse --abbrev-ref HEAD)
            target_branch="main" # 或者您固定的部署分支
            
            if [ "\$current_branch" != "\$target_branch" ]; then
              echo "Switching to \$target_branch branch..."
              git checkout "\$target_branch" || { echo "❌ Failed to checkout branch \$target_branch."; exit 1; }
            fi
            
            echo "Pulling from origin \$target_branch..."
            # 可以考虑先 stash 服务器上的本地改动 (如果有)
            # git stash push -m "Auto-stash before CI/CD pull"
            git pull origin "\$target_branch" || { echo "❌ Failed to pull changes from origin \$target_branch."; exit 1; }
            # git stash pop # 如果之前 stash 了

            echo "🐳 Stopping and removing old Docker containers..."
            docker-compose down --remove-orphans

            echo "🏗️ Building and starting new Docker containers..."
            docker-compose up -d --build

            echo "🧹 (Optional) Pruning unused Docker images..."
            docker image prune -af

            echo "🎉 Deployment to http://${SERVER_HOST_ENV}:3002 (frontend) and http://${SERVER_HOST_ENV}:8081 (backend) successful!"
          EOF
