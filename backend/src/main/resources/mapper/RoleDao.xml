<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.pension.dao.RoleDao">

    <!-- 结果映射 -->
    <resultMap id="roleMap" type="com.example.pension.model.Role">
        <id property="id" column="id"/>
        <result property="roleName" column="role_name"/>
        <result property="roleKey" column="role_key"/>
        <result property="description" column="description"/>
        <result property="status" column="status"/>
        <result property="createTime" column="create_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <!-- 基础查询字段 -->
    <sql id="baseColumns">
        id, role_name, role_key, description, status, create_time, update_time
    </sql>

    <!-- 插入角色 -->
    <insert id="insert" parameterType="com.example.pension.model.Role" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO role (role_name, role_key, description, status, create_time, update_time)
        VALUES (#{roleName}, #{roleKey}, #{description}, #{status}, NOW(), NOW())
    </insert>

    <!-- 更新角色 -->
    <update id="update" parameterType="com.example.pension.model.Role">
        UPDATE role SET
            role_name = #{roleName},
            role_key = #{roleKey},
            description = #{description},
            status = #{status},
            update_time = NOW()
        WHERE id = #{id}
    </update>

    <!-- 根据ID删除角色 -->
    <delete id="deleteById" parameterType="long">
        DELETE FROM role WHERE id = #{id}
    </delete>

    <!-- 批量删除角色 -->
    <delete id="deleteBatchByIds">
        DELETE FROM role WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!-- 根据ID查询角色 -->
    <select id="findById" parameterType="long" resultMap="roleMap">
        SELECT <include refid="baseColumns"/>
        FROM role
        WHERE id = #{id}
    </select>

    <!-- 查询所有角色 -->
    <select id="findAll" resultMap="roleMap">
        SELECT <include refid="baseColumns"/>
        FROM role
        ORDER BY create_time DESC
    </select>

    <!-- 条件查询角色 -->
    <select id="findWithConditions" resultMap="roleMap">
        SELECT <include refid="baseColumns"/>
        FROM role
        WHERE 1=1
        <if test="roleName != null and roleName != ''">
            AND role_name LIKE CONCAT('%', #{roleName}, '%')
        </if>
        <if test="roleKey != null and roleKey != ''">
            AND role_key LIKE CONCAT('%', #{roleKey}, '%')
        </if>
        ORDER BY create_time DESC
    </select>

    <!-- 根据用户ID查询角色 -->
    <select id="findByUserId" parameterType="long" resultMap="roleMap">
        SELECT r.id, r.role_name, r.role_key, r.description, r.create_time, r.update_time
        FROM role r
        INNER JOIN user_role ur ON r.id = ur.role_id
        WHERE ur.user_id = #{userId}
        ORDER BY r.create_time DESC
    </select>

    <!-- 检查角色键是否存在 -->
    <select id="existsByRoleKey" parameterType="string" resultType="boolean">
        SELECT COUNT(*) > 0 FROM role WHERE role_key = #{roleKey}
    </select>

    <!-- 检查角色键是否存在（排除指定ID） -->
    <select id="existsByRoleKeyExcludeId" resultType="boolean">
        SELECT COUNT(*) > 0 FROM role 
        WHERE role_key = #{roleKey} AND id != #{excludeId}
    </select>

    <!-- 更新角色状态 -->
    <update id="updateStatus">
        UPDATE role SET
            status = #{status},
            update_time = NOW()
        WHERE id = #{id}
    </update>

</mapper> 